# Stage 1: Builder
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /usr/src/app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl \
    tzdata

# Copy package files for dependency installation
COPY --chown=node:node package*.json ./

# Install dependencies with strict lockfile
RUN npm ci

# Copy source code
COPY --chown=node:node . .

# Build TypeScript code
RUN npm run build

# Stage 2: Production
FROM node:18-alpine

# Add labels for container metadata
LABEL maintainer="DevOps Team" \
      version="1.0.0" \
      description="Message Service Container" \
      environment="production"

# Set production environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=2048" \
    TZ=UTC

# Create app directory and set ownership
WORKDIR /usr/src/app

# Install production dependencies
RUN apk add --no-cache curl tzdata && \
    addgroup -g 1001 nodejs && \
    adduser -u 1001 -G nodejs -s /bin/sh -D nodejs && \
    chown -R nodejs:nodejs /usr/src/app

# Copy built assets from builder stage
COPY --chown=nodejs:nodejs --from=builder /usr/src/app/dist ./dist
COPY --chown=nodejs:nodejs --from=builder /usr/src/app/package*.json ./

# Install production dependencies only
RUN npm ci --only=production && \
    npm cache clean --force

# Set secure permissions
RUN chmod -R 550 /usr/src/app && \
    chmod -R 550 /usr/src/app/dist && \
    chmod -R 550 /usr/src/app/node_modules

# Switch to non-root user
USER nodejs

# Expose service port
EXPOSE 3000

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Set read-only root filesystem
RUN chmod a-w /usr

# Start the service
CMD ["node", "dist/index.js"]