version: "3.9"

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile.api
    image: ai-chat/api-gateway:1.0
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - MESSAGE_SERVICE_URL=message-service:3001
      - USER_SERVICE_URL=user-service:3002
      - AI_SERVICE_URL=ai-service:8000
    depends_on:
      redis:
        condition: service_healthy
      message-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Message Service
  message-service:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile.message
    image: ai-chat/message-service:1.0
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URL=mongodb://mongodb:27017/messages
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # User Service
  user-service:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile.user
    image: ai-chat/user-service:1.0
    environment:
      - NODE_ENV=production
      - PORT=3002
      - POSTGRES_URL=postgresql://postgres:5432/users
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # AI Service
  ai-service:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile.ai
    image: ai-chat/ai-service:1.0
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - MILVUS_HOST=milvus
      - REDIS_URL=redis://redis:6379
    depends_on:
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # MongoDB
  mongodb:
    image: mongo:6.0
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=secure_password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - app_network

  # PostgreSQL
  postgres:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=users
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - app_network

  # Redis
  redis:
    image: redis:7.0
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - app_network

  # Milvus
  milvus:
    image: milvusdb/milvus:v2.2.0
    volumes:
      - milvus_data:/var/lib/milvus
    environment:
      - ETCD_ENDPOINTS=etcd:2379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - app_network

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: /data/mongodb
      o: bind
  postgres_data:
    driver: local
  redis_data:
    driver: local
  milvus_data:
    driver: local

networks:
  app_network:
    driver: bridge
    enable_ipv6: true
    internal: true
    attachable: true
    labels:
      com.example.description: "Production network for AI chat platform"