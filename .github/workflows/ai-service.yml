name: AI Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/ai-service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/ai-service/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: ai-service
  MIN_COVERAGE: 85
  MAX_IMAGE_SIZE: 1000000000  # 1GB in bytes

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/ai-service/requirements.txt
          pip install pytest pytest-cov pylint mypy

      - name: Run linting
        run: |
          pylint src/backend/ai-service/src/
          mypy src/backend/ai-service/src/

      - name: Run tests with coverage
        run: |
          pytest src/backend/ai-service/tests/ \
            --cov=src/backend/ai-service/src/ \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=test-results.xml

      - name: Verify coverage meets threshold
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          if (( $(echo "$COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
            echo "Coverage $COVERAGE% is below minimum ${{ env.MIN_COVERAGE }}%"
            exit 1
          fi

      - name: Run security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: src/backend/ai-service
          file: src/backend/Dockerfile.ai
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Check image size
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} --format='{{.Size}}')
          if [ $IMAGE_SIZE -gt ${{ env.MAX_IMAGE_SIZE }} ]; then
            echo "Image size $IMAGE_SIZE bytes exceeds maximum ${{ env.MAX_IMAGE_SIZE }} bytes"
            exit 1
          fi

  deploy:
    name: Deploy to Production
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy canary
        run: |
          kubectl set image deployment/ai-service-canary \
            ai-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            --record

      - name: Wait for canary health
        run: |
          kubectl rollout status deployment/ai-service-canary --timeout=300s

      - name: Monitor canary metrics
        run: |
          # Monitor error rates and performance metrics
          for i in {1..5}; do
            ERRORS=$(kubectl exec -it deploy/ai-service-canary -- curl -s localhost:8000/metrics | grep '^agent_errors_total')
            if [ ! -z "$ERRORS" ] && [ $ERRORS -gt 0 ]; then
              echo "Canary showing errors, rolling back"
              kubectl rollout undo deployment/ai-service-canary
              exit 1
            fi
            sleep 60
          done

      - name: Deploy to production
        if: success()
        run: |
          kubectl set image deployment/ai-service \
            ai-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/ai-service --timeout=300s

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update monitoring
        if: success()
        run: |
          curl -X POST ${{ secrets.DATADOG_API_URL }}/api/v1/events \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d @- << EOF
            {
              "title": "AI Service Deployment",
              "text": "Version ${{ github.sha }} deployed successfully",
              "tags": ["service:ai", "env:prod", "version:${{ github.sha }}"]
            }
          EOF