name: API Gateway CI/CD

# Trigger workflow on push/PR to main/staging for relevant paths
on:
  push:
    branches: [main, staging]
    paths:
      - 'src/backend/api-gateway/**'
      - 'src/backend/Dockerfile.api'
  pull_request:
    branches: [main, staging]
    paths:
      - 'src/backend/api-gateway/**'
      - 'src/backend/Dockerfile.api'

# Environment variables
env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  DOCKER_IMAGE: api-gateway
  COVERAGE_THRESHOLD: 80
  MAX_IMAGE_SIZE: 250000000 # 250MB in bytes

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for SonarQube

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint
        
      - name: Run unit tests
        run: |
          pnpm run test --coverage --ci --maxWorkers=2
          
      - name: Check test coverage
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below threshold (${{ env.COVERAGE_THRESHOLD }}%)"
            exit 1
          fi

      - name: Build TypeScript
        run: pnpm run build

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 14

  security-scan:
    name: Security Scanning
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.14.2
        with:
          format: spdx-json
          artifact-name: sbom.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.11.2
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            snyk-report.json
            sbom.json
            trivy-results.txt

  build-and-push-image:
    name: Build and Push Docker Image
    needs: security-scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: src/backend/Dockerfile.api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Check image size
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }} --format='{{.Size}}')
          if [ "$IMAGE_SIZE" -gt "${{ env.MAX_IMAGE_SIZE }}" ]; then
            echo "Image size exceeds maximum allowed size of 250MB"
            exit 1
          fi

  deploy:
    name: Deploy
    needs: build-and-push-image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Deploy to environment
        run: |
          echo "Deploying to ${GITHUB_REF##*/} environment"
          # Add actual deployment commands here

      - name: Health check
        run: |
          # Add health check commands here
          echo "Running health checks..."

      - name: Verify metrics
        run: |
          # Add metrics verification
          echo "Verifying deployment metrics..."

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment: context.ref.split('/').pop(),
              auto_merge: false
            });