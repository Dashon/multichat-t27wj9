name: Preference Engine CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/preference-engine/**'
      - '.github/workflows/preference-engine.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/preference-engine/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: ghcr.io/preference-engine
  TEST_COVERAGE_THRESHOLD: 90
  PERFORMANCE_THRESHOLD_MS: 2000
  MAX_RETRIES: 3
  HEALTH_CHECK_INTERVAL: 30

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/preference-engine/requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout

      - name: Run security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run tests with coverage
        run: |
          pytest src/backend/preference-engine/tests/ \
            --cov=src/backend/preference-engine/src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.TEST_COVERAGE_THRESHOLD }} \
            --asyncio-mode=auto \
            --log-cli-level=INFO

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: preference-engine
          fail_ci_if_error: true

  build:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "::set-output name=version::$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: src/backend/preference-engine
          file: src/backend/Dockerfile.ai
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            GIT_SHA=${{ github.sha }}
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster preference-engine-cluster \
            --service preference-engine-service \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster preference-engine-cluster \
            --services preference-engine-service \
            --region ${{ secrets.AWS_REGION }}

      - name: Verify deployment
        run: |
          attempt=1
          max_attempts=${{ env.MAX_RETRIES }}
          interval=${{ env.HEALTH_CHECK_INTERVAL }}
          
          while [ $attempt -le $max_attempts ]; do
            if curl -sf https://api.example.com/preference-engine/health; then
              echo "Health check passed"
              exit 0
            fi
            
            echo "Attempt $attempt failed, waiting ${interval}s..."
            sleep $interval
            attempt=$((attempt + 1))
          done
          
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Verify performance
        run: |
          response_time=$(curl -w "%{time_total}" -s -o /dev/null https://api.example.com/preference-engine/health)
          response_ms=$(echo "$response_time * 1000" | bc)
          
          if (( $(echo "$response_ms > ${{ env.PERFORMANCE_THRESHOLD_MS }}" | bc -l) )); then
            echo "Performance check failed: ${response_ms}ms > ${{ env.PERFORMANCE_THRESHOLD_MS }}ms"
            exit 1
          fi
          
          echo "Performance check passed: ${response_ms}ms"

      - name: Rollback on failure
        if: failure()
        run: |
          aws ecs update-service \
            --cluster preference-engine-cluster \
            --service preference-engine-service \
            --task-definition preference-engine:previous \
            --region ${{ secrets.AWS_REGION }}