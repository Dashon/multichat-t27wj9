name: Message Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/message-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/message-service/**'

env:
  DOCKER_REGISTRY: ghcr.io
  NODE_VERSION: '18.x'
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}/message-service
  WORKING_DIRECTORY: src/backend/message-service

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15  # SLA requirement: <10 mins for build and test
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 5

      - name: Lint code
        run: npm run lint
        timeout-minutes: 3

      - name: Run unit tests
        run: npm run test:ci
        timeout-minutes: 5

      - name: Run integration tests
        run: npm run test:integration
        timeout-minutes: 5

      - name: Run Snyk security scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 14

  docker-build:
    name: Docker Build and Push
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30  # SLA requirement: <30 mins for deployment
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 5

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: src/backend
          file: src/backend/Dockerfile.message
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
          platforms: linux/amd64
          target: production

      - name: Verify image size
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ env.DOCKER_IMAGE }}:sha-${GITHUB_SHA} --format='{{.Size}}')
          MAX_SIZE=262144000  # 250MB in bytes
          if [ "$IMAGE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "Image size exceeds 250MB limit"
            exit 1
          fi

      - name: Run Snyk container scan
        uses: snyk/actions/docker@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_IMAGE }}:sha-${GITHUB_SHA}
          args: --severity-threshold=high

      - name: Upload build logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs
          path: logs/*.log
          retention-days: 7

notifications:
  slack:
    on_success: change
    on_failure: always
    channels:
      - development-team
      - deployment-team